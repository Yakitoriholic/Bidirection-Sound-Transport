/* Description:Internal functions for reading and writing numeric values. Don't include this header directly.
* Language:C++
* Author:***
*
*/

#ifndef LIB_TEXT_PROCESS_NUMERIC
#define LIB_TEXT_PROCESS_NUMERIC

namespace nsText{
	struct __FloatTable_Entry{
		// The real value of the entry is Mantissa * pow(2, Exponent).
		INT4b Exponent;
		UINT4b Mantissa_Float;
		UINT8b Mantissa_Double;
	};

	const UBINT __FloatTable_pow10_ZeroIndex = 343;

	const __FloatTable_Entry __FloatTable_pow10[686] = {
		// This table contains the powers of 10 with the exponent range [-343, 342].

		{ -0x4B3, 0xBF29DCAC, 0xBF29DCABA82FDEAE },
		{ -0x4B0, 0xEEF453D7, 0xEEF453D6923BD65A }, { -0x4AC, 0x9558B466, 0x9558B4661B6565F8 }, { -0x4A9, 0xBAAEE180, 0xBAAEE17FA23EBF76 }, { -0x4A6, 0xE95A99E0, 0xE95A99DF8ACE6F54 },
		{ -0x4A2, 0x91D8A02C, 0x91D8A02BB6C10594 }, { -0x49F, 0xB64EC837, 0xB64EC836A47146FA }, { -0x49C, 0xE3E27A44, 0xE3E27A444D8D98B8 }, { -0x498, 0x8E6D8C6B, 0x8E6D8C6AB0787F73 },
		{ -0x495, 0xB208EF85, 0xB208EF855C969F50 }, { -0x492, 0xDE8B2B67, 0xDE8B2B66B3BC4724 }, { -0x48E, 0x8B16FB20, 0x8B16FB203055AC76 }, { -0x48B, 0xADDCB9E8, 0xADDCB9E83C6B1794 },
		{ -0x488, 0xD953E862, 0xD953E8624B85DD79 }, { -0x484, 0x87D4713D, 0x87D4713D6F33AA6C }, { -0x481, 0xA9C98D8D, 0xA9C98D8CCB009506 }, { -0x47E, 0xD43BF0F0, 0xD43BF0EFFDC0BA48 },
		{ -0x47A, 0x84A57696, 0x84A57695FE98746D }, { -0x477, 0xA5CED43B, 0xA5CED43B7E3E9188 }, { -0x474, 0xCF42894A, 0xCF42894A5DCE35EA }, { -0x470, 0x818995CE, 0x818995CE7AA0E1B2 },
		{ -0x46D, 0xA1EBFB42, 0xA1EBFB4219491A1F }, { -0x46A, 0xCA66FA13, 0xCA66FA129F9B60A7 }, { -0x467, 0xFD00B897, 0xFD00B897478238D1 }, { -0x463, 0x9E20735F, 0x9E20735E8CB16382 },
		{ -0x460, 0xC5A89036, 0xC5A890362FDDBC63 }, { -0x45D, 0xF712B444, 0xF712B443BBD52B7C }, { -0x459, 0x9A6BB0AA, 0x9A6BB0AA55653B2D }, { -0x456, 0xC1069CD5, 0xC1069CD4EABE89F9 },
		{ -0x453, 0xF148440A, 0xF148440A256E2C77 }, { -0x44F, 0x96CD2A86, 0x96CD2A865764DBCA }, { -0x44C, 0xBC807528, 0xBC807527ED3E12BD }, { -0x449, 0xEBA09272, 0xEBA09271E88D976C },
		{ -0x445, 0x93445B87, 0x93445B8731587EA3 }, { -0x442, 0xB8157269, 0xB8157268FDAE9E4C }, { -0x43F, 0xE61ACF03, 0xE61ACF033D1A45DF }, { -0x43B, 0x8FD0C162, 0x8FD0C16206306BAC },
		{ -0x438, 0xB3C4F1BB, 0xB3C4F1BA87BC8697 }, { -0x435, 0xE0B62E29, 0xE0B62E2929ABA83C }, { -0x431, 0x8C71DCDA, 0x8C71DCD9BA0B4926 }, { -0x42E, 0xAF8E5410, 0xAF8E5410288E1B6F },
		{ -0x42B, 0xDB71E914, 0xDB71E91432B1A24B }, { -0x427, 0x892731AD, 0x892731AC9FAF056F }, { -0x424, 0xAB70FE18, 0xAB70FE17C79AC6CA }, { -0x421, 0xD64D3D9E, 0xD64D3D9DB981787D },
		{ -0x41D, 0x85F04683, 0x85F0468293F0EB4E }, { -0x41A, 0xA76C5823, 0xA76C582338ED2622 }, { -0x417, 0xD1476E2C, 0xD1476E2C07286FAA }, { -0x413, 0x82CCA4DC, 0x82CCA4DB847945CA },
		{ -0x410, 0xA37FCE12, 0xA37FCE126597973D }, { -0x40D, 0xCC5FC197, 0xCC5FC196FEFD7D0C }, { -0x40A, 0xFF77B1FD, 0xFF77B1FCBEBCDC4F }, { -0x406, 0x9FAACF3E, 0x9FAACF3DF73609B1 },
		{ -0x403, 0xC795830D, 0xC795830D75038C1E }, { -0x400, 0xF97AE3D1, 0xF97AE3D0D2446F25 }, { -0x3FC, 0x9BECCE63, 0x9BECCE62836AC577 }, { -0x3F9, 0xC2E801FB, 0xC2E801FB244576D5 },
		{ -0x3F6, 0xF3A2027A, 0xF3A20279ED56D48A }, { -0x3F2, 0x9845418C, 0x9845418C345644D7 }, { -0x3EF, 0xBE5691EF, 0xBE5691EF416BD60C }, { -0x3EC, 0xEDEC366B, 0xEDEC366B11C6CB8F },
		{ -0x3E8, 0x94B3A203, 0x94B3A202EB1C3F39 }, { -0x3E5, 0xB9E08A84, 0xB9E08A83A5E34F08 }, { -0x3E2, 0xE858AD25, 0xE858AD248F5C22CA }, { -0x3DE, 0x91376C37, 0x91376C36D99995BE },
		{ -0x3DB, 0xB5854745, 0xB58547448FFFFB2E }, { -0x3D8, 0xE2E69916, 0xE2E69915B3FFF9F9 }, { -0x3D4, 0x8DD01FAE, 0x8DD01FAD907FFC3C }, { -0x3D1, 0xB1442799, 0xB1442798F49FFB4B },
		{ -0x3CE, 0xDD95317F, 0xDD95317F31C7FA1D }, { -0x3CA, 0x8A7D3EEF, 0x8A7D3EEF7F1CFC52 }, { -0x3C7, 0xAD1C8EAB, 0xAD1C8EAB5EE43B67 }, { -0x3C4, 0xD863B256, 0xD863B256369D4A41 },
		{ -0x3C0, 0x873E4F76, 0x873E4F75E2224E68 }, { -0x3BD, 0xA90DE353, 0xA90DE3535AAAE202 }, { -0x3BA, 0xD3515C28, 0xD3515C2831559A83 }, { -0x3B6, 0x8412D999, 0x8412D9991ED58092 },
		{ -0x3B3, 0xA5178FFF, 0xA5178FFF668AE0B6 }, { -0x3B0, 0xCE5D73FF, 0xCE5D73FF402D98E4 }, { -0x3AC, 0x80FA6880, 0x80FA687F881C7F8E }, { -0x3A9, 0xA139029F, 0xA139029F6A239F72 },
		{ -0x3A6, 0xC9874347, 0xC987434744AC874F }, { -0x3A3, 0xFBE91419, 0xFBE9141915D7A922 }, { -0x39F, 0x9D71AC90, 0x9D71AC8FADA6C9B5 }, { -0x39C, 0xC4CE17B4, 0xC4CE17B399107C23 },
		{ -0x399, 0xF6019DA0, 0xF6019DA07F549B2B }, { -0x395, 0x99C10284, 0x99C102844F94E0FB }, { -0x392, 0xC0314325, 0xC0314325637A193A }, { -0x38F, 0xF03D93EF, 0xF03D93EEBC589F88 },
		{ -0x38B, 0x96267C75, 0x96267C7535B763B5 }, { -0x388, 0xBBB01B93, 0xBBB01B9283253CA3 }, { -0x385, 0xEA9C2277, 0xEA9C227723EE8BCB }, { -0x381, 0x92A1958A, 0x92A1958A7675175F },
		{ -0x37E, 0xB749FAED, 0xB749FAED14125D37 }, { -0x37B, 0xE51C79A8, 0xE51C79A85916F485 }, { -0x377, 0x8F31CC09, 0x8F31CC0937AE58D3 }, { -0x374, 0xB2FE3F0C, 0xB2FE3F0B8599EF08 },
		{ -0x371, 0xDFBDCECE, 0xDFBDCECE67006AC9 }, { -0x36D, 0x8BD6A141, 0x8BD6A141006042BE }, { -0x36A, 0xAECC4991, 0xAECC49914078536D }, { -0x367, 0xDA7F5BF6, 0xDA7F5BF590966849 },
		{ -0x363, 0x888F9979, 0x888F99797A5E012D }, { -0x360, 0xAAB37FD8, 0xAAB37FD7D8F58179 }, { -0x35D, 0xD5605FCE, 0xD5605FCDCF32E1D7 }, { -0x359, 0x855C3BE1, 0x855C3BE0A17FCD26 },
		{ -0x356, 0xA6B34AD9, 0xA6B34AD8C9DFC070 }, { -0x353, 0xD0601D8F, 0xD0601D8EFC57B08C }, { -0x34F, 0x823C1279, 0x823C12795DB6CE57 }, { -0x34C, 0xA2CB1718, 0xA2CB1717B52481ED },
		{ -0x349, 0xCB7DDCDE, 0xCB7DDCDDA26DA269 }, { -0x346, 0xFE5D5415, 0xFE5D54150B090B03 }, { -0x342, 0x9EFA548D, 0x9EFA548D26E5A6E2 }, { -0x33F, 0xC6B8E9B0, 0xC6B8E9B0709F109A },
		{ -0x33C, 0xF867241D, 0xF867241C8CC6D4C1 }, { -0x338, 0x9B407692, 0x9B407691D7FC44F8 }, { -0x335, 0xC2109436, 0xC21094364DFB5637 }, { -0x332, 0xF294B944, 0xF294B943E17A2BC4 },
		{ -0x32E, 0x979CF3CA, 0x979CF3CA6CEC5B5B }, { -0x32B, 0xBD8430BD, 0xBD8430BD08277231 }, { -0x328, 0xECE53CEC, 0xECE53CEC4A314EBE }, { -0x324, 0x940F4614, 0x940F4613AE5ED137 },
		{ -0x321, 0xB9131799, 0xB913179899F68584 }, { -0x31E, 0xE757DD7F, 0xE757DD7EC07426E5 }, { -0x31A, 0x9096EA6F, 0x9096EA6F3848984F }, { -0x317, 0xB4BCA50B, 0xB4BCA50B065ABE63 },
		{ -0x314, 0xE1EBCE4E, 0xE1EBCE4DC7F16DFC }, { -0x310, 0x8D3360F1, 0x8D3360F09CF6E4BD }, { -0x30D, 0xB080392D, 0xB080392CC4349DED }, { -0x30A, 0xDCA04778, 0xDCA04777F541C568 },
		{ -0x306, 0x89E42CAB, 0x89E42CAAF9491B61 }, { -0x303, 0xAC5D37D6, 0xAC5D37D5B79B6239 }, { -0x300, 0xD77485CB, 0xD77485CB25823AC7 }, { -0x2FC, 0x86A8D39F, 0x86A8D39EF77164BD },
		{ -0x2F9, 0xA8530887, 0xA8530886B54DBDEC }, { -0x2F6, 0xD267CAA8, 0xD267CAA862A12D67 }, { -0x2F2, 0x8380DEA9, 0x8380DEA93DA4BC60 }, { -0x2EF, 0xA4611654, 0xA46116538D0DEB78 },
		{ -0x2EC, 0xCD795BE8, 0xCD795BE870516656 }, { -0x2E8, 0x806BD971, 0x806BD9714632DFF6 }, { -0x2E5, 0xA086CFCE, 0xA086CFCD97BF97F4 }, { -0x2E2, 0xC8A883C1, 0xC8A883C0FDAF7DF0 },
		{ -0x2DF, 0xFAD2A4B1, 0xFAD2A4B13D1B5D6C }, { -0x2DB, 0x9CC3A6EF, 0x9CC3A6EEC6311A64 }, { -0x2D8, 0xC3F490AA, 0xC3F490AA77BD60FD }, { -0x2D5, 0xF4F1B4D5, 0xF4F1B4D515ACB93C },
		{ -0x2D1, 0x99171105, 0x991711052D8BF3C5 }, { -0x2CE, 0xBF5CD546, 0xBF5CD54678EEF0B7 }, { -0x2CB, 0xEF340A98, 0xEF340A98172AACE5 }, { -0x2C7, 0x9580869F, 0x9580869F0E7AAC0F },
		{ -0x2C4, 0xBAE0A847, 0xBAE0A846D2195713 }, { -0x2C1, 0xE998D259, 0xE998D258869FACD7 }, { -0x2BD, 0x91FF8377, 0x91FF83775423CC06 }, { -0x2BA, 0xB67F6455, 0xB67F6455292CBF08 },
		{ -0x2B7, 0xE41F3D6A, 0xE41F3D6A7377EECA }, { -0x2B3, 0x8E938663, 0x8E938662882AF53E }, { -0x2B0, 0xB23867FB, 0xB23867FB2A35B28E }, { -0x2AD, 0xDEC681FA, 0xDEC681F9F4C31F31 },
		{ -0x2A9, 0x8B3C113C, 0x8B3C113C38F9F37F }, { -0x2A6, 0xAE0B158B, 0xAE0B158B4738705F }, { -0x2A3, 0xD98DDAEE, 0xD98DDAEE19068C76 }, { -0x29F, 0x87F8A8D5, 0x87F8A8D4CFA417CA },
		{ -0x29C, 0xA9F6D30A, 0xA9F6D30A038D1DBC }, { -0x299, 0xD47487CD, 0xD47487CC8470652B }, { -0x295, 0x84C8D4E0, 0x84C8D4DFD2C63F3B }, { -0x292, 0xA5FB0A18, 0xA5FB0A17C777CF0A },
		{ -0x28F, 0xCF79CC9E, 0xCF79CC9DB955C2CC }, { -0x28B, 0x81AC1FE3, 0x81AC1FE293D599C0 }, { -0x288, 0xA21727DB, 0xA21727DB38CB0030 }, { -0x285, 0xCA9CF1D2, 0xCA9CF1D206FDC03C },
		{ -0x282, 0xFD442E47, 0xFD442E4688BD304B }, { -0x27E, 0x9E4A9CEC, 0x9E4A9CEC15763E2F }, { -0x27B, 0xC5DD4427, 0xC5DD44271AD3CDBA }, { -0x278, 0xF7549531, 0xF7549530E188C129 },
		{ -0x274, 0x9A94DD3F, 0x9A94DD3E8CF578BA }, { -0x271, 0xC13A148E, 0xC13A148E3032D6E8 }, { -0x26E, 0xF18899B2, 0xF18899B1BC3F8CA2 }, { -0x26A, 0x96F5600F, 0x96F5600F15A7B7E5 },
		{ -0x267, 0xBCB2B813, 0xBCB2B812DB11A5DE }, { -0x264, 0xEBDF6618, 0xEBDF661791D60F56 }, { -0x260, 0x936B9FCF, 0x936B9FCEBB25C996 }, { -0x25D, 0xB84687C2, 0xB84687C269EF3BFB },
		{ -0x25A, 0xE65829B3, 0xE65829B3046B0AFA }, { -0x256, 0x8FF71A10, 0x8FF71A0FE2C2E6DC }, { -0x253, 0xB3F4E094, 0xB3F4E093DB73A093 }, { -0x250, 0xE0F218B9, 0xE0F218B8D25088B8 },
		{ -0x24C, 0x8C974F74, 0x8C974F7383725573 }, { -0x249, 0xAFBD2350, 0xAFBD2350644EEAD0 }, { -0x246, 0xDBAC6C24, 0xDBAC6C247D62A584 }, { -0x242, 0x894BC397, 0x894BC396CE5DA772 },
		{ -0x23F, 0xAB9EB47D, 0xAB9EB47C81F5114F }, { -0x23C, 0xD686619C, 0xD686619BA27255A3 }, { -0x238, 0x8613FD01, 0x8613FD0145877586 }, { -0x235, 0xA798FC42, 0xA798FC4196E952E7 },
		{ -0x232, 0xD17F3B52, 0xD17F3B51FCA3A7A1 }, { -0x22E, 0x82EF8513, 0x82EF85133DE648C5 }, { -0x22B, 0xA3AB6658, 0xA3AB66580D5FDAF6 }, { -0x228, 0xCC963FEE, 0xCC963FEE10B7D1B3 },
		{ -0x225, 0xFFBBCFEA, 0xFFBBCFE994E5C620 }, { -0x221, 0x9FD561F2, 0x9FD561F1FD0F9BD4 }, { -0x21E, 0xC7CABA6E, 0xC7CABA6E7C5382C9 }, { -0x21B, 0xF9BD690A, 0xF9BD690A1B68637B },
		{ -0x217, 0x9C1661A6, 0x9C1661A651213E2D }, { -0x214, 0xC31BFA10, 0xC31BFA0FE5698DB8 }, { -0x211, 0xF3E2F894, 0xF3E2F893DEC3F126 }, { -0x20D, 0x986DDB5C, 0x986DDB5C6B3A76B8 },
		{ -0x20A, 0xBE895234, 0xBE89523386091466 }, { -0x207, 0xEE2BA6C0, 0xEE2BA6C0678B597F }, { -0x203, 0x94DB4838, 0x94DB483840B717F0 }, { -0x200, 0xBA121A46, 0xBA121A4650E4DDEC },
		{ -0x1FD, 0xE896A0D8, 0xE896A0D7E51E1566 }, { -0x1F9, 0x915E2487, 0x915E2486EF32CD60 }, { -0x1F6, 0xB5B5ADA9, 0xB5B5ADA8AAFF80B8 }, { -0x1F3, 0xE3231913, 0xE3231912D5BF60E6 },
		{ -0x1EF, 0x8DF5EFAC, 0x8DF5EFABC5979C90 }, { -0x1EC, 0xB1736B97, 0xB1736B96B6FD83B4 }, { -0x1E9, 0xDDD0467C, 0xDDD0467C64BCE4A1 }, { -0x1E5, 0x8AA22C0E, 0x8AA22C0DBEF60EE4 },
		{ -0x1E2, 0xAD4AB711, 0xAD4AB7112EB3929E }, { -0x1DF, 0xD89D64D5, 0xD89D64D57A607745 }, { -0x1DB, 0x87625F05, 0x87625F056C7C4A8B }, { -0x1D8, 0xA93AF6C7, 0xA93AF6C6C79B5D2E },
		{ -0x1D5, 0xD389B478, 0xD389B47879823479 }, { -0x1D1, 0x843610CB, 0x843610CB4BF160CC }, { -0x1CE, 0xA54394FE, 0xA54394FE1EEDB8FF }, { -0x1CB, 0xCE947A3E, 0xCE947A3DA6A9273E },
		{ -0x1C7, 0x811CCC67, 0x811CCC668829B887 }, { -0x1C4, 0xA163FF80, 0xA163FF802A3426A9 }, { -0x1C1, 0xC9BCFF60, 0xC9BCFF6034C13053 }, { -0x1BE, 0xFC2C3F38, 0xFC2C3F3841F17C68 },
		{ -0x1BA, 0x9D9BA783, 0x9D9BA7832936EDC1 }, { -0x1B7, 0xC5029164, 0xC5029163F384A931 }, { -0x1B4, 0xF64335BD, 0xF64335BCF065D37D }, { -0x1B0, 0x99EA0196, 0x99EA0196163FA42E },
		{ -0x1AD, 0xC06481FC, 0xC06481FB9BCF8D3A }, { -0x1AA, 0xF07DA27B, 0xF07DA27A82C37088 }, { -0x1A6, 0x964E858D, 0x964E858C91BA2655 }, { -0x1A3, 0xBBE226F0, 0xBBE226EFB628AFEB },
		{ -0x1A0, 0xEADAB0AC, 0xEADAB0ABA3B2DBE5 }, { -0x19C, 0x92C8AE6B, 0x92C8AE6B464FC96F }, { -0x199, 0xB77ADA06, 0xB77ADA0617E3BBCB }, { -0x196, 0xE5599088, 0xE55990879DDCAABE },
		{ -0x192, 0x8F57FA55, 0x8F57FA54C2A9EAB7 }, { -0x18F, 0xB32DF8EA, 0xB32DF8E9F3546564 }, { -0x18C, 0xDFF97724, 0xDFF9772470297EBD }, { -0x188, 0x8BFBEA77, 0x8BFBEA76C619EF36 },
		{ -0x185, 0xAEFAE514, 0xAEFAE51477A06B04 }, { -0x182, 0xDAB99E5A, 0xDAB99E59958885C5 }, { -0x17E, 0x88B402F8, 0x88B402F7FD75539B }, { -0x17B, 0xAAE103B6, 0xAAE103B5FCD2A882 },
		{ -0x178, 0xD59944A3, 0xD59944A37C0752A2 }, { -0x174, 0x857FCAE6, 0x857FCAE62D8493A5 }, { -0x171, 0xA6DFBDA0, 0xA6DFBD9FB8E5B88F }, { -0x16E, 0xD097AD08, 0xD097AD07A71F26B2 },
		{ -0x16A, 0x825ECC25, 0x825ECC24C8737830 }, { -0x167, 0xA2F67F2E, 0xA2F67F2DFA90563B }, { -0x164, 0xCBB41EF9, 0xCBB41EF979346BCA }, { -0x161, 0xFEA126B8, 0xFEA126B7D78186BD },
		{ -0x15D, 0x9F24B833, 0x9F24B832E6B0F436 }, { -0x15A, 0xC6EDE640, 0xC6EDE63FA05D3144 }, { -0x157, 0xF8A95FD0, 0xF8A95FCF88747D94 }, { -0x153, 0x9B69DBE2, 0x9B69DBE1B548CE7D },
		{ -0x150, 0xC24452DA, 0xC24452DA229B021C }, { -0x14D, 0xF2D56791, 0xF2D56790AB41C2A3 }, { -0x149, 0x97C560BA, 0x97C560BA6B0919A6 }, { -0x146, 0xBDB6B8E9, 0xBDB6B8E905CB600F },
		{ -0x143, 0xED246723, 0xED246723473E3813 }, { -0x13F, 0x9436C076, 0x9436C0760C86E30C }, { -0x13C, 0xB9447094, 0xB94470938FA89BCF }, { -0x139, 0xE7958CB8, 0xE7958CB87392C2C3 },
		{ -0x135, 0x90BD77F3, 0x90BD77F3483BB9BA }, { -0x132, 0xB4ECD5F0, 0xB4ECD5F01A4AA828 }, { -0x12F, 0xE2280B6C, 0xE2280B6C20DD5232 }, { -0x12B, 0x8D590724, 0x8D590723948A535F },
		{ -0x128, 0xB0AF48EC, 0xB0AF48EC79ACE837 }, { -0x125, 0xDCDB1B28, 0xDCDB1B2798182245 }, { -0x121, 0x8A08F0F9, 0x8A08F0F8BF0F156B }, { -0x11E, 0xAC8B2D37, 0xAC8B2D36EED2DAC6 },
		{ -0x11B, 0xD7ADF885, 0xD7ADF884AA879177 }, { -0x117, 0x86CCBB53, 0x86CCBB52EA94BAEB }, { -0x114, 0xA87FEA28, 0xA87FEA27A539E9A5 }, { -0x111, 0xD29FE4B2, 0xD29FE4B18E88640F },
		{ -0x10D, 0x83A3EEEF, 0x83A3EEEEF9153E89 }, { -0x10A, 0xA48CEAAB, 0xA48CEAAAB75A8E2B }, { -0x107, 0xCDB02555, 0xCDB02555653131B6 }, { -0x103, 0x808E1755, 0x808E17555F3EBF12 },
		{ -0x100, 0xA0B19D2B, 0xA0B19D2AB70E6ED6 }, { -0xFD, 0xC8DE0475, 0xC8DE047564D20A8C }, { -0xFA, 0xFB158593, 0xFB158592BE068D2F }, { -0xF6, 0x9CED737C, 0x9CED737BB6C4183D },
		{ -0xF3, 0xC428D05B, 0xC428D05AA4751E4D }, { -0xF0, 0xF5330471, 0xF53304714D9265E0 }, { -0xEC, 0x993FE2C7, 0x993FE2C6D07B7FAC }, { -0xE9, 0xBF8FDB79, 0xBF8FDB78849A5F97 },
		{ -0xE6, 0xEF73D257, 0xEF73D256A5C0F77D }, { -0xE2, 0x95A86376, 0x95A8637627989AAE }, { -0xDF, 0xBB127C54, 0xBB127C53B17EC159 }, { -0xDC, 0xE9D71B69, 0xE9D71B689DDE71B0 },
		{ -0xD8, 0x92267121, 0x9226712162AB070E }, { -0xD5, 0xB6B00D6A, 0xB6B00D69BB55C8D1 }, { -0xD2, 0xE45C10C4, 0xE45C10C42A2B3B06 }, { -0xCE, 0x8EB98A7B, 0x8EB98A7A9A5B04E3 },
		{ -0xCB, 0xB267ED19, 0xB267ED1940F1C61C }, { -0xC8, 0xDF01E860, 0xDF01E85F912E37A3 }, { -0xC4, 0x8B61313C, 0x8B61313BBABCE2C6 }, { -0xC1, 0xAE397D8B, 0xAE397D8AA96C1B78 },
		{ -0xBE, 0xD9C7DCED, 0xD9C7DCED53C72256 }, { -0xBA, 0x881CEA14, 0x881CEA14545C7575 }, { -0xB7, 0xAA242499, 0xAA242499697392D3 }, { -0xB4, 0xD4AD2DC0, 0xD4AD2DBFC3D07788 },
		{ -0xB0, 0x84EC3C98, 0x84EC3C97DA624AB5 }, { -0xAD, 0xA6274BBE, 0xA6274BBDD0FADD62 }, { -0xAA, 0xCFB11EAD, 0xCFB11EAD453994BA }, { -0xA6, 0x81CEB32C, 0x81CEB32C4B43FCF5 },
		{ -0xA3, 0xA2425FF7, 0xA2425FF75E14FC32 }, { -0xA0, 0xCAD2F7F5, 0xCAD2F7F5359A3B3E }, { -0x9D, 0xFD87B5F3, 0xFD87B5F28300CA0E }, { -0x99, 0x9E74D1B8, 0x9E74D1B791E07E48 },
		{ -0x96, 0xC6120625, 0xC612062576589DDB }, { -0x93, 0xF79687AF, 0xF79687AED3EEC551 }, { -0x8F, 0x9ABE14CD, 0x9ABE14CD44753B53 }, { -0x8C, 0xC16D9A01, 0xC16D9A0095928A27 },
		{ -0x89, 0xF1C90081, 0xF1C90080BAF72CB1 }, { -0x85, 0x971DA050, 0x971DA05074DA7BEF }, { -0x82, 0xBCE50865, 0xBCE5086492111AEB }, { -0x7F, 0xEC1E4A7E, 0xEC1E4A7DB69561A5 },
		{ -0x7B, 0x9392EE8F, 0x9392EE8E921D5D07 }, { -0x78, 0xB877AA32, 0xB877AA3236A4B449 }, { -0x75, 0xE69594BF, 0xE69594BEC44DE15B }, { -0x71, 0x901D7CF7, 0x901D7CF73AB0ACD9 },
		{ -0x6E, 0xB424DC35, 0xB424DC35095CD80F }, { -0x6B, 0xE12E1342, 0xE12E13424BB40E13 }, { -0x67, 0x8CBCCC09, 0x8CBCCC096F5088CC }, { -0x64, 0xAFEBFF0C, 0xAFEBFF0BCB24AAFF },
		{ -0x61, 0xDBE6FECF, 0xDBE6FECEBDEDD5BF }, { -0x5D, 0x89705F41, 0x89705F4136B4A597 }, { -0x5A, 0xABCC7712, 0xABCC77118461CEFD }, { -0x57, 0xD6BF94D6, 0xD6BF94D5E57A42BC },
		{ -0x53, 0x8637BD06, 0x8637BD05AF6C69B6 }, { -0x50, 0xA7C5AC47, 0xA7C5AC471B478423 }, { -0x4D, 0xD1B71759, 0xD1B71758E219652C }, { -0x49, 0x83126E98, 0x83126E978D4FDF3B },
		{ -0x46, 0xA3D70A3D, 0xA3D70A3D70A3D70A }, { -0x43, 0xCCCCCCCD, 0xCCCCCCCCCCCCCCCD }, { -0x3F, 0x80000000, 0x8000000000000000 }, { -0x3C, 0xA0000000, 0xA000000000000000 },
		{ -0x39, 0xC8000000, 0xC800000000000000 }, { -0x36, 0xFA000000, 0xFA00000000000000 }, { -0x32, 0x9C400000, 0x9C40000000000000 }, { -0x2F, 0xC3500000, 0xC350000000000000 },
		{ -0x2C, 0xF4240000, 0xF424000000000000 }, { -0x28, 0x98968000, 0x9896800000000000 }, { -0x25, 0xBEBC2000, 0xBEBC200000000000 }, { -0x22, 0xEE6B2800, 0xEE6B280000000000 },
		{ -0x1E, 0x9502F900, 0x9502F90000000000 }, { -0x1B, 0xBA43B740, 0xBA43B74000000000 }, { -0x18, 0xE8D4A510, 0xE8D4A51000000000 }, { -0x14, 0x9184E72A, 0x9184E72A00000000 },
		{ -0x11, 0xB5E620F4, 0xB5E620F480000000 }, { -0xE, 0xE35FA932, 0xE35FA931A0000000 }, { -0xA, 0x8E1BC9BF, 0x8E1BC9BF04000000 }, { -0x7, 0xB1A2BC2F, 0xB1A2BC2EC5000000 },
		{ -0x4, 0xDE0B6B3A, 0xDE0B6B3A76400000 }, { 0x0, 0x8AC72305, 0x8AC7230489E80000 }, { 0x3, 0xAD78EBC6, 0xAD78EBC5AC620000 }, { 0x6, 0xD8D726B7, 0xD8D726B7177A8000 },
		{ 0xA, 0x87867832, 0x878678326EAC9000 }, { 0xD, 0xA968163F, 0xA968163F0A57B400 }, { 0x10, 0xD3C21BCF, 0xD3C21BCECCEDA100 }, { 0x14, 0x84595161, 0x84595161401484A0 },
		{ 0x17, 0xA56FA5BA, 0xA56FA5B99019A5C8 }, { 0x1A, 0xCECB8F28, 0xCECB8F27F4200F3A }, { 0x1E, 0x813F3979, 0x813F3978F8940984 }, { 0x21, 0xA18F07D7, 0xA18F07D736B90BE5 },
		{ 0x24, 0xC9F2C9CD, 0xC9F2C9CD04674EDF }, { 0x27, 0xFC6F7C40, 0xFC6F7C4045812296 }, { 0x2B, 0x9DC5ADA8, 0x9DC5ADA82B70B59E }, { 0x2E, 0xC5371912, 0xC5371912364CE305 },
		{ 0x31, 0xF684DF57, 0xF684DF56C3E01BC7 }, { 0x35, 0x9A130B96, 0x9A130B963A6C115C }, { 0x38, 0xC097CE7C, 0xC097CE7BC90715B3 }, { 0x3B, 0xF0BDC21A, 0xF0BDC21ABB48DB20 },
		{ 0x3F, 0x96769951, 0x96769950B50D88F4 }, { 0x42, 0xBC143FA5, 0xBC143FA4E250EB31 }, { 0x45, 0xEB194F8E, 0xEB194F8E1AE525FD }, { 0x49, 0x92EFD1B9, 0x92EFD1B8D0CF37BE },
		{ 0x4C, 0xB7ABC627, 0xB7ABC627050305AE }, { 0x4F, 0xE596B7B1, 0xE596B7B0C643C719 }, { 0x53, 0x8F7E32CE, 0x8F7E32CE7BEA5C70 }, { 0x56, 0xB35DBF82, 0xB35DBF821AE4F38C },
		{ 0x59, 0xE0352F62, 0xE0352F62A19E306F }, { 0x5D, 0x8C213D9E, 0x8C213D9DA502DE45 }, { 0x60, 0xAF298D05, 0xAF298D050E4395D7 }, { 0x63, 0xDAF3F046, 0xDAF3F04651D47B4C },
		{ 0x67, 0x88D8762C, 0x88D8762BF324CD10 }, { 0x6A, 0xAB0E93B7, 0xAB0E93B6EFEE0054 }, { 0x6D, 0xD5D238A4, 0xD5D238A4ABE98068 }, { 0x71, 0x85A36367, 0x85A36366EB71F041 },
		{ 0x74, 0xA70C3C40, 0xA70C3C40A64E6C52 }, { 0x77, 0xD0CF4B51, 0xD0CF4B50CFE20766 }, { 0x7B, 0x82818F13, 0x82818F1281ED44A0 }, { 0x7E, 0xA321F2D7, 0xA321F2D7226895C8 },
		{ 0x81, 0xCBEA6F8D, 0xCBEA6F8CEB02BB3A }, { 0x84, 0xFEE50B70, 0xFEE50B7025C36A08 }, { 0x88, 0x9F4F2726, 0x9F4F2726179A2245 }, { 0x8B, 0xC722F0F0, 0xC722F0EF9D80AAD6 },
		{ 0x8E, 0xF8EBAD2C, 0xF8EBAD2B84E0D58C }, { 0x92, 0x9B934C3B, 0x9B934C3B330C8577 }, { 0x95, 0xC2781F4A, 0xC2781F49FFCFA6D5 }, { 0x98, 0xF316271C, 0xF316271C7FC3908B },
		{ 0x9C, 0x97EDD872, 0x97EDD871CFDA3A57 }, { 0x9F, 0xBDE94E8E, 0xBDE94E8E43D0C8EC }, { 0xA2, 0xED63A232, 0xED63A231D4C4FB27 }, { 0xA6, 0x945E455F, 0x945E455F24FB1CF9 },
		{ 0xA9, 0xB975D6B7, 0xB975D6B6EE39E437 }, { 0xAC, 0xE7D34C64, 0xE7D34C64A9C85D44 }, { 0xB0, 0x90E40FBF, 0x90E40FBEEA1D3A4B }, { 0xB3, 0xB51D13AE, 0xB51D13AEA4A488DD },
		{ 0xB6, 0xE264589A, 0xE264589A4DCDAB15 }, { 0xBA, 0x8D7EB760, 0x8D7EB76070A08AED }, { 0xBD, 0xB0DE6538, 0xB0DE65388CC8ADA8 }, { 0xC0, 0xDD15FE86, 0xDD15FE86AFFAD912 },
		{ 0xC4, 0x8A2DBF14, 0x8A2DBF142DFCC7AB }, { 0xC7, 0xACB92ED9, 0xACB92ED9397BF996 }, { 0xCA, 0xD7E77A90, 0xD7E77A8F87DAF7FC }, { 0xCE, 0x86F0AC9A, 0x86F0AC99B4E8DAFD },
		{ 0xD1, 0xA8ACD7C0, 0xA8ACD7C0222311BD }, { 0xD4, 0xD2D80DB0, 0xD2D80DB02AABD62C }, { 0xD8, 0x83C7088E, 0x83C7088E1AAB65DB }, { 0xDB, 0xA4B8CAB2, 0xA4B8CAB1A1563F52 },
		{ 0xDE, 0xCDE6FD5E, 0xCDE6FD5E09ABCF27 }, { 0xE2, 0x80B05E5B, 0x80B05E5AC60B6178 }, { 0xE5, 0xA0DC75F1, 0xA0DC75F1778E39D6 }, { 0xE8, 0xC913936E, 0xC913936DD571C84C },
		{ 0xEB, 0xFB587849, 0xFB5878494ACE3A5F }, { 0xEF, 0x9D174B2E, 0x9D174B2DCEC0E47B }, { 0xF2, 0xC45D1DF9, 0xC45D1DF942711D9A }, { 0xF5, 0xF5746578, 0xF5746577930D6501 },
		{ 0xF9, 0x9968BF6B, 0x9968BF6ABBE85F20 }, { 0xFC, 0xBFC2EF45, 0xBFC2EF456AE276E9 }, { 0xFF, 0xEFB3AB17, 0xEFB3AB16C59B14A3 }, { 0x103, 0x95D04AEE, 0x95D04AEE3B80ECE6 },
		{ 0x106, 0xBB445DAA, 0xBB445DA9CA61281F }, { 0x109, 0xEA157514, 0xEA1575143CF97227 }, { 0x10D, 0x924D692D, 0x924D692CA61BE758 }, { 0x110, 0xB6E0C378, 0xB6E0C377CFA2E12E },
		{ 0x113, 0xE498F456, 0xE498F455C38B997A }, { 0x117, 0x8EDF98B6, 0x8EDF98B59A373FEC }, { 0x11A, 0xB2977EE3, 0xB2977EE300C50FE7 }, { 0x11D, 0xDF3D5E9C, 0xDF3D5E9BC0F653E1 },
		{ 0x121, 0x8B865B21, 0x8B865B215899F46D }, { 0x124, 0xAE67F1EA, 0xAE67F1E9AEC07188 }, { 0x127, 0xDA01EE64, 0xDA01EE641A708DEA }, { 0x12B, 0x884134FF, 0x884134FE908658B2 },
		{ 0x12E, 0xAA51823E, 0xAA51823E34A7EEDF }, { 0x131, 0xD4E5E2CE, 0xD4E5E2CDC1D1EA96 }, { 0x135, 0x850FADC1, 0x850FADC09923329E }, { 0x138, 0xA6539930, 0xA6539930BF6BFF46 },
		{ 0x13B, 0xCFE87F7D, 0xCFE87F7CEF46FF17 }, { 0x13F, 0x81F14FAE, 0x81F14FAE158C5F6E }, { 0x142, 0xA26DA39A, 0xA26DA3999AEF774A }, { 0x145, 0xCB090C80, 0xCB090C8001AB551C },
		{ 0x148, 0xFDCB4FA0, 0xFDCB4FA002162A63 }, { 0x14C, 0x9E9F11C4, 0x9E9F11C4014DDA7E }, { 0x14F, 0xC646D635, 0xC646D63501A1511E }, { 0x152, 0xF7D88BC2, 0xF7D88BC24209A565 },
		{ 0x156, 0x9AE75759, 0x9AE757596946075F }, { 0x159, 0xC1A12D30, 0xC1A12D2FC3978937 }, { 0x15C, 0xF209787C, 0xF209787BB47D6B85 }, { 0x160, 0x9745EB4D, 0x9745EB4D50CE6333 },
		{ 0x163, 0xBD176620, 0xBD176620A501FC00 }, { 0x166, 0xEC5D3FA9, 0xEC5D3FA8CE427B00 }, { 0x16A, 0x93BA47CA, 0x93BA47C980E98CE0 }, { 0x16D, 0xB8A8D9BC, 0xB8A8D9BBE123F018 },
		{ 0x170, 0xE6D3102B, 0xE6D3102AD96CEC1E }, { 0x174, 0x9043EA1B, 0x9043EA1AC7E41393 }, { 0x177, 0xB454E4A1, 0xB454E4A179DD1877 }, { 0x17A, 0xE16A1DCA, 0xE16A1DC9D8545E95 },
		{ 0x17E, 0x8CE2529E, 0x8CE2529E2734BB1D }, { 0x181, 0xB01AE746, 0xB01AE745B101E9E4 }, { 0x184, 0xDC21A117, 0xDC21A1171D42645D }, { 0x188, 0x899504AE, 0x899504AE72497EBA },
		{ 0x18B, 0xABFA45DA, 0xABFA45DA0EDBDE69 }, { 0x18E, 0xD6F8D750, 0xD6F8D7509292D603 }, { 0x192, 0x865B8692, 0x865B86925B9BC5C2 }, { 0x195, 0xA7F26837, 0xA7F26836F282B733 },
		{ 0x198, 0xD1EF0244, 0xD1EF0244AF2364FF }, { 0x19C, 0x8335616B, 0x8335616AED761F1F }, { 0x19F, 0xA402B9C6, 0xA402B9C5A8D3A6E7 }, { 0x1A2, 0xCD036837, 0xCD036837130890A1 },
		{ 0x1A6, 0x80222122, 0x802221226BE55A65 }, { 0x1A9, 0xA02AA96B, 0xA02AA96B06DEB0FE }, { 0x1AC, 0xC83553C6, 0xC83553C5C8965D3D }, { 0x1AF, 0xFA42A8B7, 0xFA42A8B73ABBF48D },
		{ 0x1B3, 0x9C69A973, 0x9C69A97284B578D8 }, { 0x1B6, 0xC38413CF, 0xC38413CF25E2D70E }, { 0x1B9, 0xF46518C3, 0xF46518C2EF5B8CD1 }, { 0x1BD, 0x98BF2F7A, 0x98BF2F79D5993803 },
		{ 0x1C0, 0xBEEEFB58, 0xBEEEFB584AFF8604 }, { 0x1C3, 0xEEAABA2E, 0xEEAABA2E5DBF6785 }, { 0x1C7, 0x952AB45D, 0x952AB45CFA97A0B3 }, { 0x1CA, 0xBA756174, 0xBA756174393D88E0 },
		{ 0x1CD, 0xE912B9D1, 0xE912B9D1478CEB17 }, { 0x1D1, 0x91ABB423, 0x91ABB422CCB812EF }, { 0x1D4, 0xB616A12B, 0xB616A12B7FE617AA }, { 0x1D7, 0xE39C4976, 0xE39C49765FDF9D95 },
		{ 0x1DB, 0x8E41ADEA, 0x8E41ADE9FBEBC27D }, { 0x1DE, 0xB1D21964, 0xB1D219647AE6B31C }, { 0x1E1, 0xDE469FBE, 0xDE469FBD99A05FE3 }, { 0x1E5, 0x8AEC23D7, 0x8AEC23D680043BEE },
		{ 0x1E8, 0xADA72CCC, 0xADA72CCC20054AEA }, { 0x1EB, 0xD910F7FF, 0xD910F7FF28069DA4 }, { 0x1EF, 0x87AA9AFF, 0x87AA9AFF79042287 }, { 0x1F2, 0xA99541BF, 0xA99541BF57452B28 },
		{ 0x1F5, 0xD3FA922F, 0xD3FA922F2D1675F2 }, { 0x1F9, 0x847C9B5D, 0x847C9B5D7C2E09B7 }, { 0x1FC, 0xA59BC235, 0xA59BC234DB398C25 }, { 0x1FF, 0xCF02B2C2, 0xCF02B2C21207EF2F },
		{ 0x203, 0x8161AFB9, 0x8161AFB94B44F57D }, { 0x206, 0xA1BA1BA8, 0xA1BA1BA79E1632DC }, { 0x209, 0xCA28A292, 0xCA28A291859BBF93 }, { 0x20C, 0xFCB2CB36, 0xFCB2CB35E702AF78 },
		{ 0x210, 0x9DEFBF02, 0x9DEFBF01B061ADAB }, { 0x213, 0xC56BAEC2, 0xC56BAEC21C7A1916 }, { 0x216, 0xF6C69A72, 0xF6C69A72A3989F5C }, { 0x21A, 0x9A3C2088, 0x9A3C2087A63F6399 },
		{ 0x21D, 0xC0CB28AA, 0xC0CB28A98FCF3C80 }, { 0x220, 0xF0FDF2D4, 0xF0FDF2D3F3C30B9F }, { 0x224, 0x969EB7C4, 0x969EB7C47859E744 }, { 0x227, 0xBC4665B6, 0xBC4665B596706115 },
		{ 0x22A, 0xEB57FF23, 0xEB57FF22FC0C795A }, { 0x22E, 0x9316FF76, 0x9316FF75DD87CBD8 }, { 0x231, 0xB7DCBF53, 0xB7DCBF5354E9BECE }, { 0x234, 0xE5D3EF28, 0xE5D3EF282A242E82 },
		{ 0x238, 0x8FA47579, 0x8FA475791A569D11 }, { 0x23B, 0xB38D92D7, 0xB38D92D760EC4455 }, { 0x23E, 0xE070F78D, 0xE070F78D3927556B }, { 0x242, 0x8C469AB8, 0x8C469AB843B89563 },
		{ 0x245, 0xAF584166, 0xAF58416654A6BABB }, { 0x248, 0xDB2E51C0, 0xDB2E51BFE9D0696A }, { 0x24C, 0x88FCF318, 0x88FCF317F22241E2 }, { 0x24F, 0xAB3C2FDE, 0xAB3C2FDDEEAAD25B },
		{ 0x252, 0xD60B3BD5, 0xD60B3BD56A5586F2 }, { 0x256, 0x85C70565, 0x85C7056562757457 }, { 0x259, 0xA738C6BE, 0xA738C6BEBB12D16D }, { 0x25C, 0xD106F86E, 0xD106F86E69D785C8 },
		{ 0x260, 0x82A45B45, 0x82A45B450226B39D }, { 0x263, 0xA34D7216, 0xA34D721642B06084 }, { 0x266, 0xCC20CE9C, 0xCC20CE9BD35C78A5 }, { 0x269, 0xFF290243, 0xFF290242C83396CE },
		{ 0x26D, 0x9F79A16A, 0x9F79A169BD203E41 }, { 0x270, 0xC75809C4, 0xC75809C42C684DD1 }, { 0x273, 0xF92E0C35, 0xF92E0C3537826146 }, { 0x277, 0x9BBCC7A1, 0x9BBCC7A142B17CCC },
		{ 0x27A, 0xC2ABF98A, 0xC2ABF989935DDBFE }, { 0x27D, 0xF356F7EC, 0xF356F7EBF83552FE }, { 0x281, 0x98165AF3, 0x98165AF37B2153DF }, { 0x284, 0xBE1BF1B0, 0xBE1BF1B059E9A8D6 },
		{ 0x287, 0xEDA2EE1C, 0xEDA2EE1C7064130C }, { 0x28B, 0x9485D4D2, 0x9485D4D1C63E8BE8 }, { 0x28E, 0xB9A74A06, 0xB9A74A0637CE2EE1 }, { 0x291, 0xE8111C88, 0xE8111C87C5C1BA9A },
		{ 0x295, 0x910AB1D5, 0x910AB1D4DB9914A0 }, { 0x298, 0xB54D5E4A, 0xB54D5E4A127F59C8 }, { 0x29B, 0xE2A0B5DC, 0xE2A0B5DC971F303A }, { 0x29F, 0x8DA471AA, 0x8DA471A9DE737E24 },
		{ 0x2A2, 0xB10D8E14, 0xB10D8E1456105DAD }, { 0x2A5, 0xDD50F199, 0xDD50F1996B947519 }, { 0x2A9, 0x8A529700, 0x8A5296FFE33CC930 }, { 0x2AC, 0xACE73CC0, 0xACE73CBFDC0BFB7B },
		{ 0x2AF, 0xD8210BF0, 0xD8210BEFD30EFA5A }, { 0x2B3, 0x8714A776, 0x8714A775E3E95C78 }, { 0x2B6, 0xA8D9D153, 0xA8D9D1535CE3B396 }, { 0x2B9, 0xD31045A8, 0xD31045A8341CA07C },
		{ 0x2BD, 0x83EA2B89, 0x83EA2B892091E44E }, { 0x2C0, 0xA4E4B66B, 0xA4E4B66B68B65D61 }, { 0x2C3, 0xCE1DE406, 0xCE1DE40642E3F4B9 }, { 0x2C7, 0x80D2AE84, 0x80D2AE83E9CE78F4 },
		{ 0x2CA, 0xA1075A25, 0xA1075A24E4421731 }, { 0x2CD, 0xC94930AE, 0xC94930AE1D529CFD }, { 0x2D0, 0xFB9B7CDA, 0xFB9B7CD9A4A7443C }, { 0x2D4, 0x9D412E08, 0x9D412E0806E88AA6 },
		{ 0x2D7, 0xC491798A, 0xC491798A08A2AD4F }, { 0x2DA, 0xF5B5D7EC, 0xF5B5D7EC8ACB58A3 }, { 0x2DE, 0x9991A6F4, 0x9991A6F3D6BF1766 }, { 0x2E1, 0xBFF610B1, 0xBFF610B0CC6EDD3F },
		{ 0x2E4, 0xEFF394DD, 0xEFF394DCFF8A948F }, { 0x2E8, 0x95F83D0A, 0x95F83D0A1FB69CD9 }, { 0x2EB, 0xBB764C4C, 0xBB764C4CA7A44410 }, { 0x2EE, 0xEA53DF60, 0xEA53DF5FD18D5514 },
		{ 0x2F2, 0x92746B9C, 0x92746B9BE2F8552C }, { 0x2F5, 0xB7118683, 0xB7118682DBB66A77 }, { 0x2F8, 0xE4D5E824, 0xE4D5E82392A40515 }, { 0x2FC, 0x8F05B116, 0x8F05B1163BA6832D },
		{ 0x2FF, 0xB2C71D5C, 0xB2C71D5BCA9023F8 }, { 0x302, 0xDF78E4B2, 0xDF78E4B2BD342CF7 }, { 0x306, 0x8BAB8EF0, 0x8BAB8EEFB6409C1A }, { 0x309, 0xAE9672AC, 0xAE9672ABA3D0C321 },
		{ 0x30C, 0xDA3C0F56, 0xDA3C0F568CC4F3E9 }, { 0x310, 0x88658996, 0x8865899617FB1871 }, { 0x313, 0xAA7EEBFC, 0xAA7EEBFB9DF9DE8E }, { 0x316, 0xD51EA6FA, 0xD51EA6FA85785631 },
		{ 0x31A, 0x8533285D, 0x8533285C936B35DF }, { 0x31D, 0xA67FF274, 0xA67FF273B8460357 }, { 0x320, 0xD01FEF10, 0xD01FEF10A657842C }, { 0x324, 0x8213F56A, 0x8213F56A67F6B29C },
		{ 0x327, 0xA298F2C5, 0xA298F2C501F45F43 }, { 0x32A, 0xCB3F2F76, 0xCB3F2F7642717713 }, { 0x32D, 0xFE0EFB54, 0xFE0EFB53D30DD4D8 }, { 0x331, 0x9EC95D14, 0x9EC95D1463E8A507 },
		{ 0x334, 0xC67BB459, 0xC67BB4597CE2CE49 }, { 0x337, 0xF81AA170, 0xF81AA16FDC1B81DB }, { 0x33B, 0x9B10A4E6, 0x9B10A4E5E9913129 }, { 0x33E, 0xC1D4CE1F, 0xC1D4CE1F63F57D73 },
		{ 0x341, 0xF24A01A7, 0xF24A01A73CF2DCD0 }, { 0x345, 0x976E4109, 0x976E41088617CA02 }, { 0x348, 0xBD49D14A, 0xBD49D14AA79DBC82 }, { 0x34B, 0xEC9C459D, 0xEC9C459D51852BA3 },
		{ 0x34F, 0x93E1AB82, 0x93E1AB8252F33B46 }, { 0x352, 0xB8DA1663, 0xB8DA1662E7B00A17 }, { 0x355, 0xE7109BFC, 0xE7109BFBA19C0C9D }, { 0x359, 0x906A617D, 0x906A617D450187E2 },
		{ 0x35C, 0xB484F9DC, 0xB484F9DC9641E9DB }, { 0x35F, 0xE1A63854, 0xE1A63853BBD26451 }, { 0x363, 0x8D07E334, 0x8D07E33455637EB3 }, { 0x366, 0xB049DC01, 0xB049DC016ABC5E60 },
		{ 0x369, 0xDC5C5302, 0xDC5C5301C56B75F7 }, { 0x36D, 0x89B9B3E1, 0x89B9B3E11B6329BB }, { 0x370, 0xAC2820D9, 0xAC2820D9623BF429 }, { 0x373, 0xD7322910, 0xD732290FBACAF134 },
		{ 0x377, 0x867F59AA, 0x867F59A9D4BED6C0 }, { 0x37A, 0xA81F3014, 0xA81F301449EE8C70 }, { 0x37D, 0xD226FC19, 0xD226FC195C6A2F8C }, { 0x381, 0x83585D90, 0x83585D8FD9C25DB8 },
		{ 0x384, 0xA42E74F4, 0xA42E74F3D032F526 }, { 0x387, 0xCD3A1231, 0xCD3A1230C43FB26F }, { 0x38B, 0x80444B5E, 0x80444B5E7AA7CF85 }, { 0x38E, 0xA0555E36, 0xA0555E361951C367 },
		{ 0x391, 0xC86AB5C4, 0xC86AB5C39FA63441 }, { 0x394, 0xFA856334, 0xFA856334878FC151 }, { 0x398, 0x9C935E01, 0x9C935E00D4B9D8D2 }, { 0x39B, 0xC3B83581, 0xC3B8358109E84F07 },
		{ 0x39E, 0xF4A642E1, 0xF4A642E14C6262C9 }, { 0x3A2, 0x98E7E9CD, 0x98E7E9CCCFBD7DBE }, { 0x3A5, 0xBF21E440, 0xBF21E44003ACDD2D }, { 0x3A8, 0xEEEA5D50, 0xEEEA5D5004981478 },
		{ 0x3AC, 0x95527A52, 0x95527A5202DF0CCB }, { 0x3AF, 0xBAA718E6, 0xBAA718E68396CFFE }, { 0x3B2, 0xE950DF20, 0xE950DF20247C83FD }, { 0x3B6, 0x91D28B74, 0x91D28B7416CDD27E },
		{ 0x3B9, 0xB6472E51, 0xB6472E511C81471E }, { 0x3BC, 0xE3D8F9E5, 0xE3D8F9E563A198E5 }, { 0x3C0, 0x8E679C2F, 0x8E679C2F5E44FF8F }, { 0x3C3, 0xB201833B, 0xB201833B35D63F73 },
		{ 0x3C6, 0xDE81E40A, 0xDE81E40A034BCF50 }, { 0x3CA, 0x8B112E86, 0x8B112E86420F6192 }, { 0x3CD, 0xADD57A28, 0xADD57A27D29339F6 }, { 0x3D0, 0xD94AD8B2, 0xD94AD8B1C7380874 },
		{ 0x3D4, 0x87CEC76F, 0x87CEC76F1C830549 }, { 0x3D7, 0xA9C2794B, 0xA9C2794AE3A3C69B }, { 0x3DA, 0xD433179E, 0xD433179D9C8CB841 }, { 0x3DE, 0x849FEEC3, 0x849FEEC281D7F329 },
		{ 0x3E1, 0xA5C7EA73, 0xA5C7EA73224DEFF3 }, { 0x3E4, 0xCF39E510, 0xCF39E50FEAE16BF0 }, { 0x3E8, 0x81842F2A, 0x81842F29F2CCE376 }, { 0x3EB, 0xA1E53AF4, 0xA1E53AF46F801C53 },
		{ 0x3EE, 0xCA5E89B2, 0xCA5E89B18B602368 }, { 0x3F1, 0xFCF62C1E, 0xFCF62C1DEE382C42 }, { 0x3F5, 0x9E19DB93, 0x9E19DB92B4E31BA9 }, { 0x3F8, 0xC5A05277, 0xC5A05277621BE294 },
		{ 0x3FB, 0xF7086715, 0xF70867153AA2DB39 }, { 0x3FF, 0x9A65406D, 0x9A65406D44A5C903 }, { 0x402, 0xC0FE9088, 0xC0FE908895CF3B44 }, { 0x405, 0xF13E34AA, 0xF13E34AABB430A15 },
		{ 0x409, 0x96C6E0EB, 0x96C6E0EAB509E64D }, { 0x40C, 0xBC789925, 0xBC789925624C5FE1 }, { 0x40F, 0xEB96BF6E, 0xEB96BF6EBADF77D9 }, { 0x413, 0x933E37A5, 0x933E37A534CBAAE8 },
		{ 0x416, 0xB80DC58E, 0xB80DC58E81FE95A1 }, { 0x419, 0xE61136F2, 0xE61136F2227E3B0A }, { 0x41D, 0x8FCAC257, 0x8FCAC257558EE4E6 }, { 0x420, 0xB3BD72ED, 0xB3BD72ED2AF29E20 },
		{ 0x423, 0xE0ACCFA8, 0xE0ACCFA875AF45A8 }, { 0x427, 0x8C6C01C9, 0x8C6C01C9498D8B89 }, { 0x42A, 0xAF87023C, 0xAF87023B9BF0EE6B }, { 0x42D, 0xDB68C2CA, 0xDB68C2CA82ED2A06 },
		{ 0x431, 0x892179BF, 0x892179BE91D43A44 }
	};

	inline UINT8b __extended_mul_64(UINT8b a, UINT8b b){
#if defined LIBENV_SYS_INTELX64
#if defined LIBENV_CPLR_VS
		UINT8b RetValue; _umul128(a, b, &RetValue); return RetValue;
#else  defined LIBENV_CPLR_GCC
		return (__uint128_t(a) * __uint128_t(b)) >> 64;
#endif
#else
		return (a >> 32) * (b >> 32) + (((a >> 32) * (b & 0xFFFFFFFF) + (b >> 32) * (a & 0xFFFFFFFF)) >> 32);
#endif
	}

	inline UINT4b __extended_mul_32(UINT4b a, UINT4b b){ return (UINT4b)(((UINT8b)a * (UINT8b)b) >> 32); }

	void __convert_float_base2_10(UINT8b *Mantissa, INT4b *Exponent, double Value){
		//suppose that value is a positive(NONZERO!), non-special float
		//Grisu3 algorithm

		UINT8b Value_Bits = *reinterpret_cast<UINT8b *>(&Value);
		INT4b Exponent_LBound, Exponent_Current, Exponent_UBound;
		UINT8b Mantissa_LBound, Mantissa_Current, Mantissa_UBound;

		Exponent_Current = (Value_Bits & nsMath::NumericTrait<double>::Exponent_Mask) >> nsMath::NumericTrait<double>::Mantissa_Bit_Count;
		Mantissa_Current = (Value_Bits & nsMath::NumericTrait<double>::Mantissa_Mask) << nsMath::NumericTrait<double>::Exponent_Bit_Count;

		if (0 == Exponent_Current){
			//denormalized numbers
			Exponent_Current -= nsMath::NumericTrait<double>::Exponent_Bias + 8 * sizeof(double) - 2;
			UBINT BitCount = sizeof(double) * 8 - nsMath::log2intsim(Mantissa_Current);
			Exponent_Current -= (INT4b)BitCount;
			Mantissa_Current <<= BitCount;

			//compute LBound and UBound
			UINT8b TmpVal = Mantissa_Current ^ (Mantissa_Current - 1);
			TmpVal ^= TmpVal >> 1;
			TmpVal >>= 1;

			Exponent_LBound = Exponent_Current;
			Exponent_UBound = Exponent_Current;
			Mantissa_LBound = Mantissa_Current - TmpVal;
			Mantissa_UBound = Mantissa_Current + TmpVal;
		}
		else{
			Exponent_Current -= nsMath::NumericTrait<double>::Exponent_Bias + 8 * sizeof(double) - 1;
			Mantissa_Current += nsMath::NumericTrait<UINT8b>::HighestBit;

			//compute LBound and UBound
			Exponent_LBound = Exponent_Current;
			Exponent_UBound = Exponent_Current;
			Mantissa_UBound = Mantissa_Current + (1 << (nsMath::NumericTrait<double>::Exponent_Bit_Count - 1));
			if (nsMath::NumericTrait<UINT8b>::HighestBit == Mantissa_Current)Mantissa_LBound = Mantissa_Current - (1 << (nsMath::NumericTrait<double>::Exponent_Bit_Count - 2));
			else Mantissa_LBound = Mantissa_Current - (1 << (nsMath::NumericTrait<double>::Exponent_Bit_Count - 1));
		}

		//find the correct entry in the table.
		INT4b power_10 = (INT4b)ceil((4 + Exponent_Current) * -0.30102999566398114); // log(2) / log (10) == 0.30102999566398114
		UBINT TableIndex = power_10 + __FloatTable_pow10_ZeroIndex;

		//float multiplications
		INT4b Exponent_New = __FloatTable_pow10[TableIndex].Exponent + Exponent_Current + sizeof(double) * 8;
		Mantissa_Current = __extended_mul_64(Mantissa_Current, __FloatTable_pow10[TableIndex].Mantissa_Double);
		Mantissa_LBound = __extended_mul_64(Mantissa_LBound, __FloatTable_pow10[TableIndex].Mantissa_Double);
		Mantissa_UBound = __extended_mul_64(Mantissa_UBound, __FloatTable_pow10[TableIndex].Mantissa_Double);

		UINT8b Delta = Mantissa_UBound - Mantissa_LBound + 2;

		UBINT Kappa = 0;
		UINT8b Kappa_Divisor = 1 << -Exponent_New;
		//bisect search
		Mantissa_UBound++;
		if (Mantissa_UBound % (Kappa_Divisor * 10000000000) < Delta){ Kappa_Divisor *= 10000000000; Kappa += 10; }
		if (Mantissa_UBound % (Kappa_Divisor * 100000) < Delta){ Kappa_Divisor *= 100000; Kappa += 5; }
		if (Mantissa_UBound % (Kappa_Divisor * 100) < Delta){ Kappa_Divisor *= 100; Kappa += 2; }
		if (Mantissa_UBound % (Kappa_Divisor * 10) < Delta){ Kappa_Divisor *= 10; Kappa += 1; }
		if (Mantissa_UBound % (Kappa_Divisor * 10) < Delta){ Kappa_Divisor *= 10; Kappa += 1; }
		UINT8b Mantissa_New = Mantissa_UBound - Mantissa_UBound % Kappa_Divisor;
		Mantissa_UBound--;

		while (
			(Mantissa_New - Kappa_Divisor >= Mantissa_LBound - 1) && //Mantissa_New must be greater than (Mantissa_LBound - 1)
			(Mantissa_New > Mantissa_Current + 1 + (Kappa_Divisor >> 1)) //Mantissa must be the closest one to (Mantissa_Current + 1)
			){
			Mantissa_New -= Kappa_Divisor;
		}

		if (Mantissa_New > Mantissa_Current - 1 + (Kappa_Divisor >> 1) && Mantissa_New - Kappa_Divisor >= Mantissa_LBound){
			//According to the original Grisu algorithm this is wrong. But I would like to do some heuristic here.
			Mantissa_New -= Kappa_Divisor;
		}

		if (Mantissa_New > Mantissa_UBound || Mantissa_New < Mantissa_LBound){
			//Completely wrong. Kappa_Divisor is too large!
			//This case probably means that (Mantissa_UBound + 1) % Kappa_Divisor == 0.
			//Some mitigation must be done.

			Kappa = 0;
			Kappa_Divisor = 1ui64 << -Exponent_New;

			if (Mantissa_UBound % (Kappa_Divisor * 10000000000) < Delta){ Kappa_Divisor *= 10000000000; Kappa += 10; }
			if (Mantissa_UBound % (Kappa_Divisor * 100000) < Delta){ Kappa_Divisor *= 100000; Kappa += 5; }
			if (Mantissa_UBound % (Kappa_Divisor * 100) < Delta){ Kappa_Divisor *= 100; Kappa += 2; }
			if (Mantissa_UBound % (Kappa_Divisor * 10) < Delta){ Kappa_Divisor *= 10; Kappa += 1; }
			if (Mantissa_UBound % (Kappa_Divisor * 10) < Delta){ Kappa_Divisor *= 10; Kappa += 1; }
			Mantissa_New = Mantissa_UBound - Mantissa_UBound % Kappa_Divisor;

			//now Mantissa_New is guaranteed to be smaller than Mantissa_UBound.
			while (
				(Mantissa_New - Kappa_Divisor >= Mantissa_LBound) && //Mantissa_New must be greater than (Mantissa_LBound - 1)
				(Mantissa_New > Mantissa_Current + 1 + (Kappa_Divisor >> 1)) //Mantissa must be the closest one to (Mantissa_Current + 1)
				){
				Mantissa_New -= Kappa_Divisor;
			}

			if (Mantissa_New > Mantissa_Current - 1 + (Kappa_Divisor >> 1) && Mantissa_New - Kappa_Divisor >= Mantissa_LBound){
				//According to the original Grisu algorithm this is wrong. But I would like to do some heuristic here.
				Mantissa_New -= Kappa_Divisor;
			}
		}

		//now we have the final output.

		*Mantissa = Mantissa_New / Kappa_Divisor;
		*Exponent = (INT4b)(Kappa - power_10);
	}

	void __convert_float_base2_10(UINT4b *Mantissa, INT4b *Exponent, float Value){
		//suppose that value is a positive(NONZERO!), non-special float
		//Grisu3 algorithm

		UINT4b Value_Bits = *reinterpret_cast<UINT4b *>(&Value);
		INT4b Exponent_LBound, Exponent_Current, Exponent_UBound;
		UINT4b Mantissa_LBound, Mantissa_Current, Mantissa_UBound;

		Exponent_Current = (Value_Bits & nsMath::NumericTrait<float>::Exponent_Mask) >> nsMath::NumericTrait<float>::Mantissa_Bit_Count;
		Mantissa_Current = (Value_Bits & nsMath::NumericTrait<float>::Mantissa_Mask) << nsMath::NumericTrait<float>::Exponent_Bit_Count;

		if (0 == Exponent_Current){
			//denormalized numbers
			Exponent_Current -= nsMath::NumericTrait<float>::Exponent_Bias + 8 * sizeof(float) - 2;
			UBINT BitCount = sizeof(float) * 8 - nsMath::log2intsim(Mantissa_Current);
			Exponent_Current -= (INT4b)BitCount;
			Mantissa_Current <<= BitCount;

			//compute LBound and UBound
			UINT4b TmpVal = Mantissa_Current ^ (Mantissa_Current - 1);
			TmpVal ^= TmpVal >> 1;
			TmpVal >>= 1;

			Exponent_LBound = Exponent_Current;
			Exponent_UBound = Exponent_Current;
			Mantissa_LBound = Mantissa_Current - TmpVal;
			Mantissa_UBound = Mantissa_Current + TmpVal;
		}
		else{
			Exponent_Current -= nsMath::NumericTrait<float>::Exponent_Bias + 8 * sizeof(float) - 1;
			Mantissa_Current += nsMath::NumericTrait<UINT4b>::HighestBit;

			//compute LBound and UBound
			Exponent_LBound = Exponent_Current;
			Exponent_UBound = Exponent_Current;
			Mantissa_UBound = Mantissa_Current + (1 << (nsMath::NumericTrait<float>::Exponent_Bit_Count - 1));
			if (nsMath::NumericTrait<UINT4b>::HighestBit == Mantissa_Current)Mantissa_LBound = Mantissa_Current - (1 << (nsMath::NumericTrait<float>::Exponent_Bit_Count - 2));
			else Mantissa_LBound = Mantissa_Current - (1 << (nsMath::NumericTrait<float>::Exponent_Bit_Count - 1));
		}

		//find the correct entry in the table.
		INT4b power_10 = (INT4b)ceil((4 + Exponent_Current) * -0.30102999566398114); // log(2) / log (10) == 0.30102999566398114
		UBINT TableIndex = power_10 + __FloatTable_pow10_ZeroIndex;

		//float multiplications
		INT4b Exponent_New = __FloatTable_pow10[TableIndex].Exponent + Exponent_Current + 2 * (sizeof(float) * 8);
		Mantissa_Current = __extended_mul_32(Mantissa_Current, __FloatTable_pow10[TableIndex].Mantissa_Float);
		Mantissa_LBound = __extended_mul_32(Mantissa_LBound, __FloatTable_pow10[TableIndex].Mantissa_Float);
		Mantissa_UBound = __extended_mul_32(Mantissa_UBound, __FloatTable_pow10[TableIndex].Mantissa_Float);

		UINT4b Delta = Mantissa_UBound - Mantissa_LBound + 2;

		UBINT Kappa = 0;
		UINT4b Kappa_Divisor = 1 << -Exponent_New;
		//bisect search
		Mantissa_UBound++;
		if (Mantissa_UBound % (Kappa_Divisor * 100000) < Delta){ Kappa_Divisor *= 100000; Kappa += 5; }
		if (Mantissa_UBound % (Kappa_Divisor * 100) < Delta){ Kappa_Divisor *= 100; Kappa += 2; }
		if (Mantissa_UBound % (Kappa_Divisor * 10) < Delta){ Kappa_Divisor *= 10; Kappa += 1; }
		if (Mantissa_UBound % (Kappa_Divisor * 10) < Delta){ Kappa_Divisor *= 10; Kappa += 1; }
		UINT4b Mantissa_New = Mantissa_UBound - Mantissa_UBound % Kappa_Divisor;
		Mantissa_UBound--;

		while (
			(Mantissa_New - Kappa_Divisor >= Mantissa_LBound - 1) && //Mantissa_New must be greater than (Mantissa_LBound - 1)
			(Mantissa_New > Mantissa_Current + 1 + (Kappa_Divisor >> 1)) //Mantissa must be the closest one to (Mantissa_Current + 1)
			){
			Mantissa_New -= Kappa_Divisor;
		}

		if (Mantissa_New > Mantissa_Current - 1 + (Kappa_Divisor >> 1) && Mantissa_New - Kappa_Divisor >= Mantissa_LBound){
			//According to the original Grisu algorithm this is wrong. But I would like to do some heuristic here.
			Mantissa_New -= Kappa_Divisor;
		}

		if (Mantissa_New > Mantissa_UBound || Mantissa_New < Mantissa_LBound){
			//Completely wrong. Kappa_Divisor is too large!
			//This case probably means that (Mantissa_UBound + 1) % Kappa_Divisor == 0.
			//Some mitigation must be done.

			Kappa = 0;
			Kappa_Divisor = 1 << -Exponent_New;

			if (Mantissa_UBound % (Kappa_Divisor * 100000) < Delta){ Kappa_Divisor *= 100000; Kappa += 5; }
			if (Mantissa_UBound % (Kappa_Divisor * 100) < Delta){ Kappa_Divisor *= 100; Kappa += 2; }
			if (Mantissa_UBound % (Kappa_Divisor * 10) < Delta){ Kappa_Divisor *= 10; Kappa += 1; }
			if (Mantissa_UBound % (Kappa_Divisor * 10) < Delta){ Kappa_Divisor *= 10; Kappa += 1; }
			Mantissa_New = Mantissa_UBound - Mantissa_UBound % Kappa_Divisor;

			//now Mantissa_New is guaranteed to be smaller than Mantissa_UBound.
			while (
				(Mantissa_New - Kappa_Divisor >= Mantissa_LBound) && //Mantissa_New must be greater than (Mantissa_LBound - 1)
				(Mantissa_New > Mantissa_Current + 1 + (Kappa_Divisor >> 1)) //Mantissa must be the closest one to (Mantissa_Current + 1)
				){
				Mantissa_New -= Kappa_Divisor;
			}

			if (Mantissa_New > Mantissa_Current - 1 + (Kappa_Divisor >> 1) && Mantissa_New - Kappa_Divisor >= Mantissa_LBound){
				//According to the original Grisu algorithm this is wrong. But I would like to do some heuristic here.
				Mantissa_New -= Kappa_Divisor;
			}
		}

		//now we have the final output.

		*Mantissa = Mantissa_New / Kappa_Divisor;
		*Exponent = (INT4b)(Kappa - power_10);
	}
	void __convert_float_base10_2(UINT8b Mantissa, INT4b Exponent, double *lpResult){
		//suppose that the mantissa is not zero and the exponent is inside the range.

		UINT8b Result_Bits;
		UINT8b Mantissa_Result = __FloatTable_pow10[Exponent + __FloatTable_pow10_ZeroIndex].Mantissa_Double;
		INT4b Exponent_Result = __FloatTable_pow10[Exponent + __FloatTable_pow10_ZeroIndex].Exponent;

		if (Mantissa > 1){
			//we need a multiply
			UINT8b Mantissa_High = __extended_mul_64(Mantissa, Mantissa_Result); Mantissa_Result *= Mantissa;
			UBINT Mantissa_High_Bits = nsMath::log2intsim(Mantissa_High);
			
			UINT8b Residual = (Mantissa_Result << (8 * sizeof(double) - Mantissa_High_Bits)) + ((Mantissa_Result >> Mantissa_High_Bits) & 1); // for rounding up
			Mantissa_Result = (Mantissa_Result >> Mantissa_High_Bits) + (Mantissa_High << (8 * sizeof(double) - Mantissa_High_Bits));
			if (Residual > nsMath::NumericTrait<double>::HighestBit)Mantissa_Result++;
			Exponent_Result += (INT4b)Mantissa_High_Bits;
		}

		Exponent_Result += nsMath::NumericTrait<double>::Exponent_Bias + 8 * sizeof(double) - 1;
		if (Exponent_Result < 0){
			Result_Bits = Mantissa_Result >> (nsMath::NumericTrait<double>::Exponent_Bit_Count - Exponent_Result + 1);

			UINT8b Residual = (Mantissa_Result & ((1 << (nsMath::NumericTrait<double>::Exponent_Bit_Count - Exponent_Result + 1)) - 1)) + (Result_Bits & 1); // for rounding up
			if (Residual > (1ui64 << (nsMath::NumericTrait<double>::Exponent_Bit_Count - Exponent_Result)))Result_Bits++;
		}
		else{
			Result_Bits = (UINT8b)Exponent_Result << nsMath::NumericTrait<double>::Mantissa_Bit_Count;
			Mantissa_Result &= nsMath::NumericTrait<double>::HighestBit - 1;
			Result_Bits += Mantissa_Result >> (nsMath::NumericTrait<double>::Exponent_Bit_Count);

			UINT8b Residual = (Mantissa_Result & ((1 << nsMath::NumericTrait<double>::Exponent_Bit_Count) - 1)) + (Result_Bits & 1); // for rounding up
			if (Residual > (1ui64 << (nsMath::NumericTrait<double>::Exponent_Bit_Count - 1)))Result_Bits++;
		}
		*lpResult = *reinterpret_cast<double *>(&Result_Bits);
	}

	void __convert_float_base10_2(UINT4b Mantissa, INT4b Exponent, float *lpResult){
		//suppose that the mantissa is not zero and the exponent is inside the range.

		UINT4b Result_Bits;
		UINT4b Mantissa_Result = __FloatTable_pow10[Exponent + __FloatTable_pow10_ZeroIndex].Mantissa_Float;
		INT4b Exponent_Result = __FloatTable_pow10[Exponent + __FloatTable_pow10_ZeroIndex].Exponent;

		if (Mantissa > 1){
			//we need a multiply
			UINT4b Mantissa_High = __extended_mul_32(Mantissa, Mantissa_Result); Mantissa_Result *= Mantissa;
			UBINT Mantissa_High_Bits = nsMath::log2intsim(Mantissa_High);

			UINT4b Residual = (Mantissa_Result << (8 * sizeof(float) - Mantissa_High_Bits)) + ((Mantissa_Result >> Mantissa_High_Bits) & 1); // for rounding up
			Mantissa_Result = (Mantissa_Result >> Mantissa_High_Bits) + (Mantissa_High << (8 * sizeof(float)-Mantissa_High_Bits));
			if (Residual > nsMath::NumericTrait<float>::HighestBit)Mantissa_Result++;
			Exponent_Result += (INT4b)Mantissa_High_Bits;
		}

		Exponent_Result += nsMath::NumericTrait<float>::Exponent_Bias + 8 * sizeof(double) - 1;
		if (Exponent_Result < 0){
			Result_Bits = Mantissa_Result >> (nsMath::NumericTrait<float>::Exponent_Bit_Count - Exponent_Result + 1);

			UINT8b Residual = (Mantissa_Result & ((1 << (nsMath::NumericTrait<float>::Exponent_Bit_Count - Exponent_Result + 1)) - 1)) + (Result_Bits & 1); // for rounding up
			if (Residual >(1ui64 << (nsMath::NumericTrait<float>::Exponent_Bit_Count - Exponent_Result)))Result_Bits++;
		}
		else{
			Result_Bits = (UINT8b)Exponent_Result << nsMath::NumericTrait<float>::Mantissa_Bit_Count;
			Mantissa_Result &= nsMath::NumericTrait<float>::HighestBit - 1;
			Result_Bits += Mantissa_Result >> (nsMath::NumericTrait<float>::Exponent_Bit_Count);

			UINT8b Residual = (Mantissa_Result & ((1 << nsMath::NumericTrait<float>::Exponent_Bit_Count) - 1)) + (Result_Bits & 1); // for rounding up
			if (Residual > (1ui64 << (nsMath::NumericTrait<float>::Exponent_Bit_Count - 1)))Result_Bits++;
		}
		*lpResult = *reinterpret_cast<float *>(&Result_Bits);
	}

	const unsigned char DigitPairs[201] = {
		"00010203040506070809"
		"10111213141516171819"
		"20212223242526272829"
		"30313233343536373839"
		"40414243444546474849"
		"50515253545556575859"
		"60616263646566676869"
		"70717273747576777879"
		"80818283848586878889"
		"90919293949596979899"
	};

	template <typename T> UBINT __convert_uint8b_2_sym(T *lpSymbols, UINT8b Value){
		const UBINT DigitCnt = 20;
		T *DigitPtr = lpSymbols + DigitCnt;
		if (0 == Value){
			*(--DigitPtr) = (T)'0';
			return 1;
		}
		else{
			while (Value >= 10){
				UBINT Index = Value % 100;
				Value /= 100;
				DigitPtr -= 2;
				DigitPtr[0] = (T)DigitPairs[2 * Index];
				DigitPtr[1] = (T)DigitPairs[2 * Index + 1];
			}
			while (Value > 0){
				DigitPtr--;
				DigitPtr[0] = (T)'0' + (T)(Value % 10);
				Value /= 10;
			}
			return lpSymbols + DigitCnt - DigitPtr;
		}
	}

	template <typename T> UBINT __convert_uint4b_2_sym(T *lpSymbols, UINT4b Value){
		const UBINT DigitCnt = 10;
		T *DigitPtr = lpSymbols + DigitCnt;
		if (0 == Value){
			*(--DigitPtr) = (T)'0';
			return 1;
		}
		else{
			while (Value >= 10){
				UBINT Index = Value % 100;
				Value /= 100;
				DigitPtr -= 2;
				DigitPtr[0] = (T)DigitPairs[2 * Index];
				DigitPtr[1] = (T)DigitPairs[2 * Index + 1];
			}
			while (Value > 0){
				DigitPtr--;
				DigitPtr[0] = (T)'0' + (T)(Value % 10);
				Value /= 10;
			}
			return lpSymbols + DigitCnt - DigitPtr;
		}
	}
}
#endif