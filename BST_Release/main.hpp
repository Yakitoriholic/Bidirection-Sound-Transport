#if defined(_WIN32) || defined(__WIN32__)
#define LIBENV_OS_WIN
#if defined(_WIN64)
#define LIBENV_SYS_INTELX64
#else
#define LIBENV_SYS_INTELX86
#endif
#elif defined(linux)
#define LIBENV_OS_LINUX
#if defined(__x86_64__) || defined(__ia64__))
#define LIBENV_SYS_INTELX64
#elif defined(__i386__)
#define LIBENV_SYS_INTELX86
#endif
#endif

#if defined(_MSC_VER) && !defined(__ICL) && !defined(__MWERKS__)
#define LIBENV_CPLR_VS
#elif defined(__GNUC__)
#define LIBENV_CPLR_GCC
#endif

#define LIBENV_WITHCON
#define LIBENV_GUI_WIN
#define LIBENV_GLIB_OPENGL
#define LIBENV_EVENT_WIN

#define LIB_GENERAL_DEF_ALLOC

// option switch --BEGIN--

// For the best result, keep these options unchanged.

#define LIBENV_CPU_ACCEL_BMI2 // instruction set architecture supported by the CPU. (see CoreLibs/lGeneral_CPU_ISA.hpp for details).
// Note that the program will not function normally when the required ISA is not supported. Remove this option if you are not sure.

//#define USE_SAMPLE_PATTERN // use Hammersley sampling in the first reflection bounce, no audible effects.
#define USE_DIFFUSE_CACHE // use diffuse cache to improve audio quality.
#define USE_PATH_CACHE  // use path cache to reduce the time cost.
#define USE_MIS // use MIS technique to improve sample quality.
#define ADAPTIVE_SAMPLING // optimize sample distribution.
#define PERFORMANCE_TEST // output performance information in the console window.

// option switch --END--

#include "lGeneral.hpp"
#include "lContainer.hpp"
#include "lMath.hpp"
#include "lMath_CG.hpp"
#include "lMath_NT.hpp"
#include "lMath_Rand.hpp"
#include "lText_Process.hpp"

#include "lGUI.hpp"
#include "lText_Process.hpp"
#include "lDSAdv.hpp"
#include "lAudio.hpp"
#include "lAudio_DSound.hpp"
#include "lAudio_WASAPI.hpp"
#include "lFormat.hpp"
#include "lFormat_Audio.hpp"
#include "lFormat_WAV.hpp"
#include "lFormat_OGG.hpp"
#include "lFormat_Audio_Selector.hpp"

#define EXTLIB_FFTW
#define EXTLIB_FREEIMAGE
#define EXTLIB_FFMPEG
#include "lLibs.hpp"

#include "ShlObj.h"

// renderer parameters --BEGIN--

const UBINT AudioSampleRate = 48000;	// The output sample rate(s^-1) of the sound renderer. The recommeneded value is 48000. Modifying this value may cause runtime errors.
const UBINT IterateTimes = 91;			// The trace depth of forward and backward rays. Must be no less than 3.
const UBINT Budget = IterateTimes * 50 * 1;
const UBINT PathCnt = Budget / IterateTimes;
										// The number of rays per frame. Must be no less than 1.

										
const UBINT ConnectionCount = (IterateTimes - 1) * PathCnt * 4;
										// The number of BDPT connections.

const UBINT IRLength = 0x20000;			// Length of the impulse response generated by the path tracer. Longer IR = longer reverbration and slower filtering and sound output.
const UBINT SndWndLen = 0x800;			// Length of the convolution window. The length of an "audio frame".
const float DiffCacheSize = 0x10000;	// The average number of samples stored in the diffuse cache.
const float DiffCacheMaxLifetime = 0x8; // The maximum lifetime of diffuse cache entries (in frames).

const float VarEstimateQuality = 2000.0f;
										// The quality of variance estimation (Q^* in the paper), A small value makes the variance estimation refreshes faster and the final output more instable.

const UBINT TestFrameCount = 200;		// Number of test frames.

const UBINT IRBinCount = IRLength * 1000 / (AudioSampleRate * 3); // number of bins used in variance estimation and energy response curve output.

// renderer parameters --END--

#include "EmbreeHelper.hpp"
#include "BDPT/EmbreeKernel.hpp"

#include "DiffuseCache.hpp"
#include "Listener.hpp"
#include "SceneMgr.hpp"

#include "BDPT/PathTracer.hpp"